<?xml version="1.0" encoding="utf-8"?><?workdir /C:\Git\XDocs-DITA-OT-185\XDocs-DITA-OT-185\DITA-OT1.8.5\temp\temp20181123111806622\Other?><?workdir-uri file:/C:/Git/XDocs-DITA-OT-185/XDocs-DITA-OT-185/DITA-OT1.8.5/temp/temp20181123111806622/Other/?><?path2project ..\?><?path2project-uri ../?><topic xmlns:ditaarch="http://dita.oasis-open.org/architecture/2005/" id="Provisioning_and_De-provisioning_2lirs0z29z" xml:lang="en-US" ditaarch:DITAArchVersion="1.2" domains="(topic hi-d)                             (topic ut-d)                             (topic indexing-d)                            (topic hazard-d)                            (topic abbrev-d)                            (topic pr-d)                             (topic sw-d)                            (topic ui-d)                            (topic struct-d)                            (topic firmware-d)                            (topic pmcrevhis-d)                            a(props  sp-version)                            a(props  pmc_switch)                            a(props   pmc_package)                            a(props   pmc_phy)                            a(props   ddr-width)                            a(props   package)                            a(props   fw_package)                            a(props   pcie-drive-ports )                            a(props   pcie-host-ports)                            a(props   raid-support )                            a(props   sas-ports )                             a(props   media)                            a(props   component)   " class="- topic/topic " xtrf="C:\Git\XDocs-DITA-OT-185\XDocs-DITA-OT-185\DITA-OT1.8.5\samples\digi\Other\LINEOTN_G5_Provisioning_Deprovisioning_Example_Code.xml" xtrc="topic:1;2:137">
  <title class="- topic/title " xtrf="C:\Git\XDocs-DITA-OT-185\XDocs-DITA-OT-185\DITA-OT1.8.5\samples\digi\Other\LINEOTN_G5_Provisioning_Deprovisioning_Example_Code.xml" xtrc="title:1;3:10">OTN, OTUCn and FlexO Port Datapath Segment Example Code</title>

  <body class="- topic/body " xtrf="C:\Git\XDocs-DITA-OT-185\XDocs-DITA-OT-185\DITA-OT1.8.5\samples\digi\Other\LINEOTN_G5_Provisioning_Deprovisioning_Example_Code.xml" xtrc="body:1;5:9">
    <p class="- topic/p " xtrf="C:\Git\XDocs-DITA-OT-185\XDocs-DITA-OT-185\DITA-OT1.8.5\samples\digi\Other\LINEOTN_G5_Provisioning_Deprovisioning_Example_Code.xml" xtrc="p:1;6:8"><draft-comment author="hookerje" time="Mon 08/15/2016 01:32 PM" translate="no" class="- topic/draft-comment " xtrf="C:\Git\XDocs-DITA-OT-185\XDocs-DITA-OT-185\DITA-OT1.8.5\samples\digi\Other\LINEOTN_G5_Provisioning_Deprovisioning_Example_Code.xml" xtrc="draft-comment:1;6:72"><p class="- topic/p " xtrf="C:\Git\XDocs-DITA-OT-185\XDocs-DITA-OT-185\DITA-OT1.8.5\samples\digi\Other\LINEOTN_G5_Provisioning_Deprovisioning_Example_Code.xml" xtrc="p:2;6:75"><b otherprops="bold" class="+ topic/ph hi-d/b " xtrf="C:\Git\XDocs-DITA-OT-185\XDocs-DITA-OT-185\DITA-OT1.8.5\samples\digi\Other\LINEOTN_G5_Provisioning_Deprovisioning_Example_Code.xml" xtrc="b:1;6:96"><i class="+ topic/ph hi-d/i " xtrf="C:\Git\XDocs-DITA-OT-185\XDocs-DITA-OT-185\DITA-OT1.8.5\samples\digi\Other\LINEOTN_G5_Provisioning_Deprovisioning_Example_Code.xml" xtrc="i:1;6:99">[DDD/HWS] Content for this section is to be provided
    by SW/Apps. Describe the APIs used to provision datapaths through the
    subsystem. Functional modes should be consistent with those described in
    the “Functional Models” section. Note if there are any rules related to
    provisioning or de-provisioning (e.g. FlexE groups), they should be
    introduced here. For example, TCMs and PM NIMs had placement rules in
    COREOTN. If there are any such restrictions they should be described in
    this section. </i></b></p><p class="- topic/p " xtrf="C:\Git\XDocs-DITA-OT-185\XDocs-DITA-OT-185\DITA-OT1.8.5\samples\digi\Other\LINEOTN_G5_Provisioning_Deprovisioning_Example_Code.xml" xtrc="p:3;13:34"><b otherprops="bold" class="+ topic/ph hi-d/b " xtrf="C:\Git\XDocs-DITA-OT-185\XDocs-DITA-OT-185\DITA-OT1.8.5\samples\digi\Other\LINEOTN_G5_Provisioning_Deprovisioning_Example_Code.xml" xtrc="b:2;13:55"><i class="+ topic/ph hi-d/i " xtrf="C:\Git\XDocs-DITA-OT-185\XDocs-DITA-OT-185\DITA-OT1.8.5\samples\digi\Other\LINEOTN_G5_Provisioning_Deprovisioning_Example_Code.xml" xtrc="i:2;13:58">Include subsystem
    specific provision steps. For example, for COREOTN, “latency_s” needs to
    be configured to reflect the latency through the fabric. There is PMON
    available to read the age and variation and guidance on how to set
    determine the latency_s setting. Other examples would be guidelines for
    setting FIFO sizes (e.g. skew compensation vs. latency tradeoff).
    </i></b></p><p class="- topic/p " xtrf="C:\Git\XDocs-DITA-OT-185\XDocs-DITA-OT-185\DITA-OT1.8.5\samples\digi\Other\LINEOTN_G5_Provisioning_Deprovisioning_Example_Code.xml" xtrc="p:4;19:20"><b otherprops="bold" class="+ topic/ph hi-d/b " xtrf="C:\Git\XDocs-DITA-OT-185\XDocs-DITA-OT-185\DITA-OT1.8.5\samples\digi\Other\LINEOTN_G5_Provisioning_Deprovisioning_Example_Code.xml" xtrc="b:3;19:41"><i class="+ topic/ph hi-d/i " xtrf="C:\Git\XDocs-DITA-OT-185\XDocs-DITA-OT-185\DITA-OT1.8.5\samples\digi\Other\LINEOTN_G5_Provisioning_Deprovisioning_Example_Code.xml" xtrc="i:3;19:44">Include runtime operations
    supported by SW. We would likely need to add these over time in later
    issues of the hardware specification.</i></b></p></draft-comment></p>

    <p class="- topic/p " xtrf="C:\Git\XDocs-DITA-OT-185\XDocs-DITA-OT-185\DITA-OT1.8.5\samples\digi\Other\LINEOTN_G5_Provisioning_Deprovisioning_Example_Code.xml" xtrc="p:5;23:8">The following example code can be used to provision an OTU4 port.</p>

    <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock " xtrf="C:\Git\XDocs-DITA-OT-185\XDocs-DITA-OT-185\DITA-OT1.8.5\samples\digi\Other\LINEOTN_G5_Provisioning_Deprovisioning_Example_Code.xml" xtrc="codeblock:1;25:16">   UINT32 device_id = 0x8817;
   UINT32 otu4_chnl_id = 0x3000;

   // pin mode is set to G5_SERDES_PIN_MODE_NRZ and will
   // use PIN 0-3 (Bank A, SHI 0) for the OTL4.4 interface
   UINT32 otn_serdes_port_id = 0;

    rc = g5_api_otn_prov(device_id, 
                                 otu4_chnl_id, 
                                 otn_serdes_port_id, 
                                 G5_SERDES_PIN_MODE_NRZ,
                                 G5_OTN_PROV_MODE_LINEOTN,
                                 G5_OTUK_OTU4,
                                 G5_OTN_FEC_MODE_CORRECTION);</codeblock>

    <p class="- topic/p " xtrf="C:\Git\XDocs-DITA-OT-185\XDocs-DITA-OT-185\DITA-OT1.8.5\samples\digi\Other\LINEOTN_G5_Provisioning_Deprovisioning_Example_Code.xml" xtrc="p:6;40:8">The following example code can be used to de-provision an OTU4
    port.</p>

    <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock " xtrf="C:\Git\XDocs-DITA-OT-185\XDocs-DITA-OT-185\DITA-OT1.8.5\samples\digi\Other\LINEOTN_G5_Provisioning_Deprovisioning_Example_Code.xml" xtrc="codeblock:2;43:16">   rc = g5_api_deprov(device_id, otu4_chnl_id, G5_DEPROV_SEGMENT);</codeblock>

    <p class="- topic/p " xtrf="C:\Git\XDocs-DITA-OT-185\XDocs-DITA-OT-185\DITA-OT1.8.5\samples\digi\Other\LINEOTN_G5_Provisioning_Deprovisioning_Example_Code.xml" xtrc="p:7;45:8">The following example code can be used to provision an OTUCn group.</p>

    <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock " xtrf="C:\Git\XDocs-DITA-OT-185\XDocs-DITA-OT-185\DITA-OT1.8.5\samples\digi\Other\LINEOTN_G5_Provisioning_Deprovisioning_Example_Code.xml" xtrc="codeblock:3;47:16">    UINT32 device_id = 0x8810;
    UINT32 otucn_group_chnl_id = 0x2000;
    UINT32 serdes_port_id[2] = {0, 2}; // Bank 0, SHI 0, lane 0 &amp; 2

    // Provision an OTUCn group with up to 2x ODUC for LINEOTN
    rc = g5_api_otucn_group_prov(device_id,
                                 otucn_group_chnl_id,
                                 G5_OTUCN_MODE_OEO,
                                 G5_OTN_PROV_MODE_LINEOTN,
                                 G5_OTUCN_OTUC_INTF,
                                 G5_MAX_INT, 
                                 G5_MAX_INT);
    MSCC_ASSERT(MSCC_SUCCESS == rc, 0);

    // Add 2 ODUC to an OTUCn Group
    for (UINT32 i = 0; i &lt; 2; i++)
    {
        rc = g5_api_otucn_port_add(device_id,
                                   0x100 + i,
                                   otucn_group_chnl_id,
                                   serdes_port_id[i],
                                   G5_SERDES_PIN_MODE_PAM4_ADJ,
                                   G5_MAX_INT, 
                                   G5_MAX_INT,
                                   0);
        MSCC_ASSERT(MSCC_SUCCESS == rc, 0);
    }

    rc = g5_api_otucn_group_config(device_id,
                                   otucn_group_chnl_id);
    MSCC_ASSERT(MSCC_SUCCESS == rc, 0);</codeblock>

    <p class="- topic/p " xtrf="C:\Git\XDocs-DITA-OT-185\XDocs-DITA-OT-185\DITA-OT1.8.5\samples\digi\Other\LINEOTN_G5_Provisioning_Deprovisioning_Example_Code.xml" xtrc="p:8;79:8">The following API can be used to change the FEC mode for the specified
    OTN channel at run time.</p>

    <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock " xtrf="C:\Git\XDocs-DITA-OT-185\XDocs-DITA-OT-185\DITA-OT1.8.5\samples\digi\Other\LINEOTN_G5_Provisioning_Deprovisioning_Example_Code.xml" xtrc="codeblock:4;82:16">PUBLIC MSCC_ERROR g5_api_otn_fec_mode_set(const UINT32 device_id,
                                           const UINT32 chnl_id,
                                           const g5_otn_fec_mode_t mode)

typedef enum g5_otn_fec_mode_t
{
    G5_OTN_FEC_MODE_NONE = 0, ///&lt; FEC mode is disabled and no processing is done
    G5_OTN_FEC_MODE_CORRECTION = 0, ///&lt; FEC mode is enabled and any forward
                                    ///&lt; correction done in the FEC correction
                                    ///&lt; module is performed.
    G5_OTN_FEC_MODE_PASSTHRU = 1, ///&lt; FEC mode is enabled and it is simply
                                  ///&lt; passed through with no FEC correction
                                  ///&lt; made.
    G5_OTN_FEC_MODE_DEFER = 3, ///&lt; In a restart case specifying this value results
                               ///&lt; in the channel retaining its current FEC value
                               ///&lt; without having to specify the value. On a cold
                               ///&lt; startup or new channel provisioning this value
                               ///&lt; has the same affect as G5_OTN_FEC_MODE_NONE
    LAST_G5_OTN_FEC_MODE ///&lt; Out of range value
} g5_otn_fec_mode_t;</codeblock>

    <p class="- topic/p " xtrf="C:\Git\XDocs-DITA-OT-185\XDocs-DITA-OT-185\DITA-OT1.8.5\samples\digi\Other\LINEOTN_G5_Provisioning_Deprovisioning_Example_Code.xml" xtrc="p:9;103:8">A selected OTU layer consequential action for an OTU4, OTU4+ or OTUCn
    channel can be enabled or disabled with the API below.</p>

    <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock " xtrf="C:\Git\XDocs-DITA-OT-185\XDocs-DITA-OT-185\DITA-OT1.8.5\samples\digi\Other\LINEOTN_G5_Provisioning_Deprovisioning_Example_Code.xml" xtrc="codeblock:5;106:16">PUBLIC MSCC_ERROR g5_api_otn_otu_conseq_act_set(const UINT32 device_id,
                                                 const UINT32 chnl_id,
                                                 const g5_otu_conseq_act_t conseq_act,
                                                 const UINT32 defect_bitmask)

/* conseq_act - Enumerates possible consequential actions generated by OPSM
*               and OTU layer. 
*/
typedef enum g5_otu_conseq_act_t
{
    G5_OTU_CONSEQ_ACT_ATSF, ///&lt; aTSF consequential action
    G5_OTU_CONSEQ_ACT_ASSF, ///&lt; aSSF consequential action
    G5_OTU_CONSEQ_ACT_ATSD, ///&lt; aTSD consequential action
    G5_OTU_CONSEQ_ACT_ASSD, ///&lt; aSSD consequential action
    G5_OTU_CONSEQ_ACT_ABEI, ///&lt; aBEI consequential action
    G5_OTU_CONSEQ_ACT_ABIAE,///&lt; aBIAE consequential action
    G5_OTU_CONSEQ_ACT_ABDI, ///&lt; aBDI consequential action
    G5_OTU_CONSEQ_ACT_FEC_FAIL, ///&lt; FEC Fail related consequential action
    LAST_G5_OTU_CONSEQ_ACT  ///&lt; For out of range error checking
} g5_otu_conseq_act_t;

/* defect_bitmask - bit mask used to select the defects that
*                  contribute to generation of the consequential
*                  action selected by conseq_act.
*                             Bit 0 - OTU_D_LOS_P: contributes to aSSF
*                             Bit 1 - OTU_D_LOL: contributes to aSSF
*                             Bit 2 - OTU_D_LOFLANE: contributes to aSSF
*                             Bit 3 - OTU_D_AIS: contributes to aBDI and aTSF
*                             Bit 4 - OTU_D_LOF: contributes to aSSF
*                             Bit 5 - OTU_D_LOM: contributes to aSSF
*                             Bit 6 - OTU_D_TIM: contributes to aBDI
*                             Bit 7 - OTU_D_IAE: contributes to aBIAE
*                             Bit 8 - OTU_D_DEG: contributes to aTSD
*                             Bit 9 - OTU_N_BIPV: contributes to aBEI
*                             Bit 10 - OTU_CI_SSF: contributes to aBDI and aTSF
*                             Bit 11 - OTU_AI_TSF: contributes to aSSF and aAIS
*                             Bit 12 - OTU_AI_TSD: contributes to aSSD
*                    Or a pre-defined activation bit mask
*                    which set all relevant bits:
*                             Bit 13 - OTU_A_TSF_ACT
*                             Bit 14 - OTU_A_SSF_ACT
*                             Bit 15 - OTU_A_BDI_ACT
*                             Bit 16 - OTU_A_BEI_ACT
*                             Bit 17 - OTU_A_BIAE_ACT
*                             Bit 18 - OTU_A_TSD_ACT
*                             Bit 19 - OTU_A_SSD_ACT
*                             Bit 20 - OTU_A_AIS_ACT
*                             Bit 21 - OTU_A_FEC_FAIL_ACT
*/</codeblock>
  </body>
</topic>